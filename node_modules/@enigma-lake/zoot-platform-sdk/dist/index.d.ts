declare enum EVENTS {
    EL_USER_BALANCE = "EL_USER_BALANCE",
    EL_GET_USER_CURRENCY = "EL_GET_USER_CURRENCY",
    EL_SET_USER_CURRENCY = "EL_SET_USER_CURRENCY",
    EL_SET_GAME_ROUND_UUID = "EL_SET_GAME_ROUND_UUID",
    EL_SET_GAME_ROUND_STATE = "EL_SET_GAME_ROUND_STATE",
    EL_SET_GAME_ROUND_VIDEO_URL = "EL_SET_GAME_ROUND_VIDEO_URL",
    EL_USER_INFORMATION = "EL_USER_INFORMATION",
    EL_LOGIN_USER = "EL_LOGIN_USER",
    EL_PURCHASE_COINS = "EL_PURCHASE_COINS",
    EL_SHOW_TOAST = "EL_SHOW_TOAST",
    EL_TOGGLE_EXPAND_GAME_VIEW = "EL_TOGGLE_EXPAND_GAME_VIEW",
    EL_GET_EXPANDED_GAME_VIEW = "EL_GET_EXPANDED_GAME_VIEW",
    EL_SHOW_PLAY_OUTCOME = "EL_SHOW_PLAY_OUTCOME",
    EL_GET_PLAY_LIMITS = "EL_GET_PLAY_LIMITS",
    EL_SET_PLAY_LIMITS = "EL_SET_PLAY_LIMITS",
    EL_SET_PLINKO_BALLS_ARE_DROPPING = "EL_SET_PLINKO_BALLS_ARE_DROPPING",
    EL_SET_ALL_PLINKO_BALLS_DROPPED = "EL_SET_ALL_PLINKO_BALLS_DROPPED"
}
interface UserBalance {
    sweepsBalance: number;
    goldBalance: number;
}
interface UserCurrency {
    currency: Currency;
}
interface GameRoundUuid {
    gameRoundUuid: string;
}
declare enum GameRoundStates {
    EMPTY = "EMPTY",
    PREPARED = "PREPARED",
    LIVE = "LIVE",
    COMPLETED = "COMPLETED"
}
interface GameRoundVideoUrl {
    videoUrl?: string;
    betAmount?: number;
    winAmount?: number;
    winMultiplier?: string;
    isPostRecordProcessing?: boolean;
}
interface GameRoundState {
    state: GameRoundStates;
}
interface GameExpandedView {
    expanded: boolean;
    isMobileView: boolean;
}
interface PlinkoBallsDroppingStatus {
    status: boolean;
}
interface PlayLimits {
    [Currency.SWEEPS]: {
        limits: {
            min: number;
            max: number;
        };
        defaultValues: number[];
    };
    [Currency.GOLD]: {
        limits: {
            min: number;
            max: number;
        };
        defaultValues: number[];
    };
}
type UserInformation = {
    id: number;
    nickname?: string;
    avatar?: string;
    accessToken: string;
};
interface Notification {
    type: "success" | "error" | "info" | "custom";
    message: string;
}
declare enum Currency {
    SWEEPS = "sweeps",
    GOLD = "gold"
}
interface PlayOutcomePayload {
    winMultiplier: number;
    playAmount: number;
    currency: Currency;
}
type RequestDataEvent = UserBalance | UserCurrency | GameRoundUuid | GameRoundState | Notification | UserInformation | GameExpandedView | GameRoundVideoUrl | PlinkoBallsDroppingStatus;
interface GetUserInformationEvent {
    type: EVENTS.EL_USER_INFORMATION;
    event_id: EVENTS.EL_USER_INFORMATION;
    data: UserInformation;
}
interface GetUserCurrencyEvent {
    type: EVENTS.EL_GET_USER_CURRENCY;
    event_id: EVENTS.EL_GET_USER_CURRENCY;
    data: UserCurrency;
}
interface GetUserBalanceEvent {
    type: EVENTS.EL_USER_BALANCE;
    event_id: EVENTS.EL_USER_BALANCE;
    data: UserBalance;
}
interface GetGameExpandedView {
    type: EVENTS.EL_GET_EXPANDED_GAME_VIEW;
    event_id: EVENTS.EL_GET_EXPANDED_GAME_VIEW;
    data: GameExpandedView;
}
interface GetPlayLimitsEvents {
    type: EVENTS.EL_SET_PLAY_LIMITS;
    event_id: EVENTS.EL_SET_PLAY_LIMITS;
    data: PlayLimits;
}
type ZootEvent = GetUserBalanceEvent | GetUserCurrencyEvent | GetUserInformationEvent | GetGameExpandedView | GetPlayLimitsEvents;

declare const sendEventResponse: (event: EVENTS, data?: RequestDataEvent) => Promise<void>;
declare const getUserBalanceEvent: () => Promise<void>;
declare const getUserCurrencyEvent: () => Promise<void>;
declare const sendSetPlinkoBallsAreDroppingEvent: ({ status }: {
    status: boolean;
}) => Promise<void>;
declare const sendSetAllPlinkoBallsDroppedEvent: ({ status }: {
    status: boolean;
}) => Promise<void>;
declare const sendSetUserCurrencyEvent: (data: UserCurrency) => Promise<void>;
declare const sendSetGameRoundUuidEvent: (data: GameRoundUuid) => Promise<void>;
declare const sendSetGameRoundStateEvent: (data: GameRoundState) => Promise<void>;
declare const sendSetGameRoundVideoUrlEvent: (data: GameRoundVideoUrl) => Promise<void>;
declare const getUserInformationEvent: () => Promise<void>;
declare const loginUserEvent: () => Promise<void>;
declare const purchaseCoinsEvent: () => Promise<void>;
declare const notifyWithPlayOutcome: (payload: PlayOutcomePayload) => Promise<void>;
declare const showNotificationEvent: (message: Notification) => Promise<void>;
declare const toggleGameViewEvent: (data: GameExpandedView) => Promise<void>;
declare const getGameViewEvent: () => Promise<void>;
declare const getPlayLimitsEvent: () => Promise<void>;
declare const requestInitData: () => Promise<void>;

export { Currency, EVENTS, GameExpandedView, GameRoundState, GameRoundStates, GameRoundUuid, GameRoundVideoUrl, GetGameExpandedView, GetPlayLimitsEvents, GetUserBalanceEvent, GetUserCurrencyEvent, GetUserInformationEvent, Notification, PlayLimits, PlayOutcomePayload, PlinkoBallsDroppingStatus, RequestDataEvent, UserBalance, UserCurrency, UserInformation, ZootEvent, getGameViewEvent, getPlayLimitsEvent, getUserBalanceEvent, getUserCurrencyEvent, getUserInformationEvent, loginUserEvent, notifyWithPlayOutcome, purchaseCoinsEvent, requestInitData, sendEventResponse, sendSetAllPlinkoBallsDroppedEvent, sendSetGameRoundStateEvent, sendSetGameRoundUuidEvent, sendSetGameRoundVideoUrlEvent, sendSetPlinkoBallsAreDroppingEvent, sendSetUserCurrencyEvent, showNotificationEvent, toggleGameViewEvent };
